version: 2
jobs:
  build:
    working_directory: ~/corectl
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "go.sum" }}
      - run:
          name: Build
          command: make build
      - save_cache:
          key: dependency-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Linting
          command: |
            make lint
            # go fmt and golint can alter go.mod and go.sum,
            # this will cause the git diff to give false negative
            # restore those files before proceeding
            git checkout go.mod go.sum
            git diff --exit-code
      - run:
          name: Test
          command: |
            go test -v -race ./...
            # go test can also modify go.mod and go.sum, ruining
            # the pristine state required for our tests to pass
            git checkout go.mod go.sum
      - run:
          name: Generate docs and spec
          command: make docs
      - run:
          name: Check if documentation needs to be updated
          command: |
            git diff --exit-code --name-only docs/*.md
      - run:
          name: Check if changes has been done to the CLI API
          command: |
            git diff --exit-code docs/spec.json
      - store_artifacts:
          path: ./docs/spec.json
      - setup_remote_docker
      - run:
          name: Run Integration Test
          command: |
            # Spin up environment
            ACCEPT_EULA=yes docker-compose -f ./test/docker-compose.yml up -d
            ENGINE_STD_CONTAINER_ID=$(docker ps -aqf "name=engine-std")
            ENGINE_ABAC_CONTAINER_ID=$(docker ps -aqf "name=engine-abac")
            TEST_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}' "$ENGINE_STD_CONTAINER_ID")
            # Start a container for test execution
            TEST_CONTAINER=$(docker run -e TEST_HOST=$TEST_HOST -d golang:1.13-alpine tail -f /dev/null)
            # Install packages
            docker exec $TEST_CONTAINER sh -c 'apk update && apk add --no-cache bash gcc git libc-dev'
            # Copy code into container
            docker cp /go/pkg $TEST_CONTAINER:/go/pkg
            docker cp . $TEST_CONTAINER:/corectl
            # Copy apps and data into the first engine container, the second one does not need it. Third engine container needs the data and the rules.
            chmod -R 777 ./test/
            docker cp ./test/apps/ $ENGINE_STD_CONTAINER_ID:/
            docker cp ./test/data/ $ENGINE_STD_CONTAINER_ID:/
            docker cp ./test/data/ $ENGINE_ABAC_CONTAINER_ID:/
            docker cp ./test/rules/ $ENGINE_ABAC_CONTAINER_ID:/
            # Execute tests
            docker exec $TEST_CONTAINER /bin/bash -c 'cd /corectl && go test ./test/corectl_integration_test.go --engineStd $TEST_HOST:9076 --engineJwt $TEST_HOST:9176 --engineAbac $TEST_HOST:9276 --engineBadLicenseServer $TEST_HOST:9376 '

  publish:
    working_directory: ~/corectl
    docker:
      - image: cibuilds/snapcraft
    steps:
      - checkout
      - run:
          name: install go
          command: |
            cd /tmp
            wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz
            tar -xvf go1.13.linux-amd64.tar.gz > /dev/null && sudo mv go /usr/local && rm go1.13.linux-amd64.tar.gz
      - run:
          name: setup snap credentials
          command: |
            mkdir .snapcraft
            echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage > .snapcraft/snapcraft.cfg
      - run:
          name: run goreleaser
          command: |
            export TEMP_PATH="/usr/local/go/bin:$PATH"
            export PATH=$TEMP_PATH
            # See if we managed to install go
            go version && curl -sL https://git.io/goreleaser | bash

workflows:
  version: 2
  build_and_publish:
    jobs:
      - build:
          filters:
            tags:
              only:
                - /v.*/
      - publish:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /v.*/
